
zack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b44  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002c50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002c50  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b573  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5b  00000000  00000000  0002b5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002d008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ef5  00000000  00000000  0002e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9e1  00000000  00000000  00043655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d0a  00000000  00000000  00050036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9d40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc8  00000000  00000000  000d9d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002be4 	.word	0x08002be4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002be4 	.word	0x08002be4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <turn_off_lights>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void turn_off_lights()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	GPIOA->ODR = GPIOA->ODR & 0xC1;
 800021c:	23a0      	movs	r3, #160	; 0xa0
 800021e:	05db      	lsls	r3, r3, #23
 8000220:	695a      	ldr	r2, [r3, #20]
 8000222:	23a0      	movs	r3, #160	; 0xa0
 8000224:	05db      	lsls	r3, r3, #23
 8000226:	21c1      	movs	r1, #193	; 0xc1
 8000228:	400a      	ands	r2, r1
 800022a:	615a      	str	r2, [r3, #20]
}
 800022c:	46c0      	nop			; (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <turn_on_light>:


void turn_on_light( uint8_t num)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
	GPIOA->ODR = GPIOA->ODR & 0xffC1;
 8000240:	23a0      	movs	r3, #160	; 0xa0
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	695a      	ldr	r2, [r3, #20]
 8000246:	23a0      	movs	r3, #160	; 0xa0
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	4909      	ldr	r1, [pc, #36]	; (8000270 <turn_on_light+0x3c>)
 800024c:	400a      	ands	r2, r1
 800024e:	615a      	str	r2, [r3, #20]
	HAL_GPIO_WritePin(GPIOA, (0x0001 << num ), GPIO_PIN_SET);
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2201      	movs	r2, #1
 8000256:	409a      	lsls	r2, r3
 8000258:	0013      	movs	r3, r2
 800025a:	b299      	uxth	r1, r3
 800025c:	23a0      	movs	r3, #160	; 0xa0
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2201      	movs	r2, #1
 8000262:	0018      	movs	r0, r3
 8000264:	f001 fb4b 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	b002      	add	sp, #8
 800026e:	bd80      	pop	{r7, pc}
 8000270:	0000ffc1 	.word	0x0000ffc1

08000274 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	pattern  = 0x00;
 800027a:	4b20      	ldr	r3, [pc, #128]	; (80002fc <main+0x88>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000280:	f000 fbb6 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f972 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 fa76 	bl	8000778 <MX_GPIO_Init>
  MX_ADC1_Init();
 800028c:	f000 f9b6 	bl	80005fc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000290:	f000 fa1e 	bl	80006d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  for (uint8_t i = 0; i < 5; i++){
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
 800029a:	e00e      	b.n	80002ba <main+0x46>
	  turn_on_light(i + 1);
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	0018      	movs	r0, r3
 80002a6:	f7ff ffc5 	bl	8000234 <turn_on_light>
	  HAL_Delay(200);
 80002aa:	20c8      	movs	r0, #200	; 0xc8
 80002ac:	f000 fc26 	bl	8000afc <HAL_Delay>
  for (uint8_t i = 0; i < 5; i++){
 80002b0:	1dfb      	adds	r3, r7, #7
 80002b2:	781a      	ldrb	r2, [r3, #0]
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	3201      	adds	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b04      	cmp	r3, #4
 80002c0:	d9ec      	bls.n	800029c <main+0x28>
  }

  for (uint8_t i = 5; i >0; i--){
 80002c2:	1dbb      	adds	r3, r7, #6
 80002c4:	2205      	movs	r2, #5
 80002c6:	701a      	strb	r2, [r3, #0]
 80002c8:	e00c      	b.n	80002e4 <main+0x70>
 	  turn_on_light(i);
 80002ca:	1dbb      	adds	r3, r7, #6
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	0018      	movs	r0, r3
 80002d0:	f7ff ffb0 	bl	8000234 <turn_on_light>
 	  HAL_Delay(200);
 80002d4:	20c8      	movs	r0, #200	; 0xc8
 80002d6:	f000 fc11 	bl	8000afc <HAL_Delay>
  for (uint8_t i = 5; i >0; i--){
 80002da:	1dbb      	adds	r3, r7, #6
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	1dbb      	adds	r3, r7, #6
 80002e0:	3a01      	subs	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
 80002e4:	1dbb      	adds	r3, r7, #6
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1ee      	bne.n	80002ca <main+0x56>
   }
  turn_off_lights();
 80002ec:	f7ff ff94 	bl	8000218 <turn_off_lights>
  HAL_TIM_Base_Start_IT(&htim3);
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <main+0x8c>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f002 f852 	bl	800239c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <main+0x84>
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	200000d8 	.word	0x200000d8
 8000300:	2000008c 	.word	0x2000008c

08000304 <HAL_TIM_PeriodElapsedCallback>:
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) //1ms timer
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	cnt = cnt + 1;
 800030c:	4b92      	ldr	r3, [pc, #584]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	b29a      	uxth	r2, r3
 8000314:	4b90      	ldr	r3, [pc, #576]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000316:	801a      	strh	r2, [r3, #0]
	t_button = t_button + 1;
 8000318:	4b90      	ldr	r3, [pc, #576]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4b8e      	ldr	r3, [pc, #568]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000322:	701a      	strb	r2, [r3, #0]

	//ad_value = HAL_ADC_GetValue(&hadc1);
	if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_0) && (t_button == 150)){
 8000324:	4b8e      	ldr	r3, [pc, #568]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000326:	2101      	movs	r1, #1
 8000328:	0018      	movs	r0, r3
 800032a:	f001 facb 	bl	80018c4 <HAL_GPIO_ReadPin>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d009      	beq.n	8000346 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000332:	4b8a      	ldr	r3, [pc, #552]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b96      	cmp	r3, #150	; 0x96
 8000338:	d105      	bne.n	8000346 <HAL_TIM_PeriodElapsedCallback+0x42>
		pattern = pattern + 1;
 800033a:	4b8a      	ldr	r3, [pc, #552]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	3301      	adds	r3, #1
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b88      	ldr	r3, [pc, #544]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000344:	701a      	strb	r2, [r3, #0]
			channel = channel - 1;
			if(channel == 1) dir = 0;
		}
		turn_on_light(channel);
	}*/
	if(pattern == 0x01){
 8000346:	4b87      	ldr	r3, [pc, #540]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d112      	bne.n	8000374 <HAL_TIM_PeriodElapsedCallback+0x70>
		channel = (cnt % 5) + 1;
 800034e:	4b82      	ldr	r3, [pc, #520]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	2105      	movs	r1, #5
 8000354:	0018      	movs	r0, r3
 8000356:	f7ff ff59 	bl	800020c <__aeabi_uidivmod>
 800035a:	000b      	movs	r3, r1
 800035c:	b29b      	uxth	r3, r3
 800035e:	b2db      	uxtb	r3, r3
 8000360:	3301      	adds	r3, #1
 8000362:	b2da      	uxtb	r2, r3
 8000364:	4b80      	ldr	r3, [pc, #512]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000366:	701a      	strb	r2, [r3, #0]
		turn_on_light(channel);
 8000368:	4b7f      	ldr	r3, [pc, #508]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	0018      	movs	r0, r3
 800036e:	f7ff ff61 	bl	8000234 <turn_on_light>
	}
	else{
		pattern = 0;
		turn_off_lights();
	}
}
 8000372:	e0ed      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
	else if(pattern == 0x02){
 8000374:	4b7b      	ldr	r3, [pc, #492]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d122      	bne.n	80003c2 <HAL_TIM_PeriodElapsedCallback+0xbe>
		channel = (cnt % 5) + 1;
 800037c:	4b76      	ldr	r3, [pc, #472]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	2105      	movs	r1, #5
 8000382:	0018      	movs	r0, r3
 8000384:	f7ff ff42 	bl	800020c <__aeabi_uidivmod>
 8000388:	000b      	movs	r3, r1
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	3301      	adds	r3, #1
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b75      	ldr	r3, [pc, #468]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000394:	701a      	strb	r2, [r3, #0]
		if(((cnt / 100) % 2) == 1)
 8000396:	4b70      	ldr	r3, [pc, #448]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	2164      	movs	r1, #100	; 0x64
 800039c:	0018      	movs	r0, r3
 800039e:	f7ff feaf 	bl	8000100 <__udivsi3>
 80003a2:	0003      	movs	r3, r0
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	2201      	movs	r2, #1
 80003a8:	4013      	ands	r3, r2
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d005      	beq.n	80003bc <HAL_TIM_PeriodElapsedCallback+0xb8>
			turn_on_light(channel);
 80003b0:	4b6d      	ldr	r3, [pc, #436]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	0018      	movs	r0, r3
 80003b6:	f7ff ff3d 	bl	8000234 <turn_on_light>
}
 80003ba:	e0c9      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
			turn_off_lights();
 80003bc:	f7ff ff2c 	bl	8000218 <turn_off_lights>
}
 80003c0:	e0c6      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
	else if(pattern == 0x03) {
 80003c2:	4b68      	ldr	r3, [pc, #416]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d12c      	bne.n	8000424 <HAL_TIM_PeriodElapsedCallback+0x120>
		channel = (cnt % 5) + 1;
 80003ca:	4b63      	ldr	r3, [pc, #396]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	2105      	movs	r1, #5
 80003d0:	0018      	movs	r0, r3
 80003d2:	f7ff ff1b 	bl	800020c <__aeabi_uidivmod>
 80003d6:	000b      	movs	r3, r1
 80003d8:	b29b      	uxth	r3, r3
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b61      	ldr	r3, [pc, #388]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80003e2:	701a      	strb	r2, [r3, #0]
		if(((cnt / 100) % 2) == 1){
 80003e4:	4b5c      	ldr	r3, [pc, #368]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	2164      	movs	r1, #100	; 0x64
 80003ea:	0018      	movs	r0, r3
 80003ec:	f7ff fe88 	bl	8000100 <__udivsi3>
 80003f0:	0003      	movs	r3, r0
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	2201      	movs	r2, #1
 80003f6:	4013      	ands	r3, r2
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d00f      	beq.n	800041e <HAL_TIM_PeriodElapsedCallback+0x11a>
			if((cnt % 2) == 0)
 80003fe:	4b56      	ldr	r3, [pc, #344]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	b29b      	uxth	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d105      	bne.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x114>
				turn_on_light(channel);
 800040c:	4b56      	ldr	r3, [pc, #344]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	0018      	movs	r0, r3
 8000412:	f7ff ff0f 	bl	8000234 <turn_on_light>
}
 8000416:	e09b      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
				turn_off_lights();
 8000418:	f7ff fefe 	bl	8000218 <turn_off_lights>
}
 800041c:	e098      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
			turn_off_lights();
 800041e:	f7ff fefb 	bl	8000218 <turn_off_lights>
}
 8000422:	e095      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
	else if (pattern == 0x04){
 8000424:	4b4f      	ldr	r3, [pc, #316]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b04      	cmp	r3, #4
 800042a:	d116      	bne.n	800045a <HAL_TIM_PeriodElapsedCallback+0x156>
		channel = ((cnt / 150) % 6);
 800042c:	4b4a      	ldr	r3, [pc, #296]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	2196      	movs	r1, #150	; 0x96
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff fe64 	bl	8000100 <__udivsi3>
 8000438:	0003      	movs	r3, r0
 800043a:	b29b      	uxth	r3, r3
 800043c:	2106      	movs	r1, #6
 800043e:	0018      	movs	r0, r3
 8000440:	f7ff fee4 	bl	800020c <__aeabi_uidivmod>
 8000444:	000b      	movs	r3, r1
 8000446:	b29b      	uxth	r3, r3
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b47      	ldr	r3, [pc, #284]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800044c:	701a      	strb	r2, [r3, #0]
		turn_on_light(channel);
 800044e:	4b46      	ldr	r3, [pc, #280]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff feee 	bl	8000234 <turn_on_light>
}
 8000458:	e07a      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
	else if (pattern == 0x05){
 800045a:	4b42      	ldr	r3, [pc, #264]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b05      	cmp	r3, #5
 8000460:	d119      	bne.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x192>
		channel = 5 - ((cnt / 150) % 6);
 8000462:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	2196      	movs	r1, #150	; 0x96
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff fe49 	bl	8000100 <__udivsi3>
 800046e:	0003      	movs	r3, r0
 8000470:	b29b      	uxth	r3, r3
 8000472:	2106      	movs	r1, #6
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff fec9 	bl	800020c <__aeabi_uidivmod>
 800047a:	000b      	movs	r3, r1
 800047c:	b29b      	uxth	r3, r3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2205      	movs	r2, #5
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b38      	ldr	r3, [pc, #224]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000488:	701a      	strb	r2, [r3, #0]
		turn_on_light(channel);
 800048a:	4b37      	ldr	r3, [pc, #220]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	0018      	movs	r0, r3
 8000490:	f7ff fed0 	bl	8000234 <turn_on_light>
}
 8000494:	e05c      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
	else if(pattern == 0x06){
 8000496:	4b33      	ldr	r3, [pc, #204]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b06      	cmp	r3, #6
 800049c:	d153      	bne.n	8000546 <HAL_TIM_PeriodElapsedCallback+0x242>
		channel = (cnt / 200) % 4;
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80004a0:	881b      	ldrh	r3, [r3, #0]
 80004a2:	21c8      	movs	r1, #200	; 0xc8
 80004a4:	0018      	movs	r0, r3
 80004a6:	f7ff fe2b 	bl	8000100 <__udivsi3>
 80004aa:	0003      	movs	r3, r0
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	2203      	movs	r2, #3
 80004b2:	4013      	ands	r3, r2
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004b8:	701a      	strb	r2, [r3, #0]
		if((channel == 2) && ((cnt % 2) == 0)) turn_on_light(1);
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d109      	bne.n	80004d6 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 80004c2:	4b25      	ldr	r3, [pc, #148]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d102      	bne.n	80004d6 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 80004d0:	2001      	movs	r0, #1
 80004d2:	f7ff feaf 	bl	8000234 <turn_on_light>
		if((channel == 2) && ((cnt % 2) == 1)) turn_on_light(5);
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d109      	bne.n	80004f2 <HAL_TIM_PeriodElapsedCallback+0x1ee>
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <HAL_TIM_PeriodElapsedCallback+0x1ee>
 80004ec:	2005      	movs	r0, #5
 80004ee:	f7ff fea1 	bl	8000234 <turn_on_light>
		if((channel == 1) && ((cnt % 2) == 0)) turn_on_light(2);
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d109      	bne.n	800050e <HAL_TIM_PeriodElapsedCallback+0x20a>
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	2201      	movs	r2, #1
 8000500:	4013      	ands	r3, r2
 8000502:	b29b      	uxth	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <HAL_TIM_PeriodElapsedCallback+0x20a>
 8000508:	2002      	movs	r0, #2
 800050a:	f7ff fe93 	bl	8000234 <turn_on_light>
		if((channel == 1) && ((cnt % 2) == 1)) turn_on_light(4);
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d109      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x226>
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	b29b      	uxth	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d002      	beq.n	800052a <HAL_TIM_PeriodElapsedCallback+0x226>
 8000524:	2004      	movs	r0, #4
 8000526:	f7ff fe85 	bl	8000234 <turn_on_light>
		if(channel == 0) turn_on_light(3);
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d102      	bne.n	8000538 <HAL_TIM_PeriodElapsedCallback+0x234>
 8000532:	2003      	movs	r0, #3
 8000534:	f7ff fe7e 	bl	8000234 <turn_on_light>
		if(channel == 3) turn_off_lights();
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b03      	cmp	r3, #3
 800053e:	d107      	bne.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8000540:	f7ff fe6a 	bl	8000218 <turn_off_lights>
}
 8000544:	e004      	b.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x24c>
		pattern = 0;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
		turn_off_lights();
 800054c:	f7ff fe64 	bl	8000218 <turn_off_lights>
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000da 	.word	0x200000da
 800055c:	200000dc 	.word	0x200000dc
 8000560:	50000400 	.word	0x50000400
 8000564:	200000d8 	.word	0x200000d8
 8000568:	200000dd 	.word	0x200000dd

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b093      	sub	sp, #76	; 0x4c
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	2414      	movs	r4, #20
 8000574:	193b      	adds	r3, r7, r4
 8000576:	0018      	movs	r0, r3
 8000578:	2334      	movs	r3, #52	; 0x34
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f002 fb29 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	0018      	movs	r0, r3
 8000586:	2310      	movs	r3, #16
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f002 fb22 	bl	8002bd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f9cf 	bl	8001938 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2202      	movs	r2, #2
 800059e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0052      	lsls	r2, r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2240      	movs	r2, #64	; 0x40
 80005b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f9fb 	bl	80019b8 <HAL_RCC_OscConfig>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005c6:	f000 f92b 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2207      	movs	r2, #7
 80005ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2100      	movs	r1, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fcf6 	bl	8001fd8 <HAL_RCC_ClockConfig>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005f0:	f000 f916 	bl	8000820 <Error_Handler>
  }
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b013      	add	sp, #76	; 0x4c
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	230c      	movs	r3, #12
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f002 fae2 	bl	8002bd4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000610:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000612:	4a2e      	ldr	r2, [pc, #184]	; (80006cc <MX_ADC1_Init+0xd0>)
 8000614:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	05d2      	lsls	r2, r2, #23
 800061c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_ADC1_Init+0xcc>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000632:	2204      	movs	r2, #4
 8000634:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000638:	2200      	movs	r2, #0
 800063a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_ADC1_Init+0xcc>)
 800063e:	2200      	movs	r2, #0
 8000640:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000644:	2200      	movs	r2, #0
 8000646:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_ADC1_Init+0xcc>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000650:	2220      	movs	r2, #32
 8000652:	2100      	movs	r1, #0
 8000654:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_ADC1_Init+0xcc>)
 800065e:	2200      	movs	r2, #0
 8000660:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000664:	222c      	movs	r2, #44	; 0x2c
 8000666:	2100      	movs	r1, #0
 8000668:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_ADC1_Init+0xcc>)
 800066c:	2200      	movs	r2, #0
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000672:	2200      	movs	r2, #0
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_ADC1_Init+0xcc>)
 800067e:	223c      	movs	r2, #60	; 0x3c
 8000680:	2100      	movs	r1, #0
 8000682:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_ADC1_Init+0xcc>)
 8000686:	2200      	movs	r2, #0
 8000688:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC1_Init+0xcc>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fb57 	bl	8000d40 <HAL_ADC_Init>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000696:	f000 f8c3 	bl	8000820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	1d3a      	adds	r2, r7, #4
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_ADC1_Init+0xcc>)
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fcec 	bl	8001090 <HAL_ADC_ConfigChannel>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80006bc:	f000 f8b0 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b004      	add	sp, #16
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000028 	.word	0x20000028
 80006cc:	40012400 	.word	0x40012400

080006d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	2310      	movs	r3, #16
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	0018      	movs	r0, r3
 80006dc:	2310      	movs	r3, #16
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f002 fa77 	bl	8002bd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	0018      	movs	r0, r3
 80006ea:	230c      	movs	r3, #12
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f002 fa70 	bl	8002bd4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_TIM3_Init+0xa0>)
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <MX_TIM3_Init+0xa4>)
 80006f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_TIM3_Init+0xa0>)
 80006fc:	220f      	movs	r2, #15
 80006fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_TIM3_Init+0xa0>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_TIM3_Init+0xa0>)
 8000708:	22fa      	movs	r2, #250	; 0xfa
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_TIM3_Init+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_TIM3_Init+0xa0>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_TIM3_Init+0xa0>)
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fde5 	bl	80022ec <HAL_TIM_Base_Init>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000726:	f000 f87b 	bl	8000820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072a:	2110      	movs	r1, #16
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	0152      	lsls	r2, r2, #5
 8000732:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000734:	187a      	adds	r2, r7, r1
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_TIM3_Init+0xa0>)
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f001 ffae 	bl	800269c <HAL_TIM_ConfigClockSource>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000744:	f000 f86c 	bl	8000820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000754:	1d3a      	adds	r2, r7, #4
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_TIM3_Init+0xa0>)
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f002 f99c 	bl	8002a98 <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000764:	f000 f85c 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b008      	add	sp, #32
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000008c 	.word	0x2000008c
 8000774:	40000400 	.word	0x40000400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	240c      	movs	r4, #12
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2314      	movs	r3, #20
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 fa23 	bl	8002bd4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_GPIO_Init+0xa0>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	2200      	movs	r2, #0
 80007c4:	213e      	movs	r1, #62	; 0x3e
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f899 	bl	80018fe <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	223e      	movs	r2, #62	; 0x3e
 80007d0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2201      	movs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2202      	movs	r2, #2
 80007e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	23a0      	movs	r3, #160	; 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 ff05 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	193b      	adds	r3, r7, r4
 8000806:	4a05      	ldr	r2, [pc, #20]	; (800081c <MX_GPIO_Init+0xa4>)
 8000808:	0019      	movs	r1, r3
 800080a:	0010      	movs	r0, r2
 800080c:	f000 fef6 	bl	80015fc <HAL_GPIO_Init>

}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b009      	add	sp, #36	; 0x24
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	50000400 	.word	0x50000400

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x44>)
 8000834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_MspInit+0x44>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	641a      	str	r2, [r3, #64]	; 0x40
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_MspInit+0x44>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x44>)
 800084c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_MspInit+0x44>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0549      	lsls	r1, r1, #21
 8000854:	430a      	orrs	r2, r1
 8000856:	63da      	str	r2, [r3, #60]	; 0x3c
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_MspInit+0x44>)
 800085a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	055b      	lsls	r3, r3, #21
 8000860:	4013      	ands	r3, r2
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	2414      	movs	r4, #20
 800087e:	193b      	adds	r3, r7, r4
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f002 f9a4 	bl	8002bd4 <memset>
  if(hadc->Instance==ADC1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_ADC_MspInit+0x80>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d129      	bne.n	80008ea <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_ADC_MspInit+0x84>)
 8000898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_ADC_MspInit+0x84>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0349      	lsls	r1, r1, #13
 80008a0:	430a      	orrs	r2, r1
 80008a2:	641a      	str	r2, [r3, #64]	; 0x40
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_ADC_MspInit+0x84>)
 80008a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	035b      	lsls	r3, r3, #13
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_ADC_MspInit+0x84>)
 80008b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_ADC_MspInit+0x84>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_ADC_MspInit+0x84>)
 80008c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2201      	movs	r2, #1
 80008ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2203      	movs	r2, #3
 80008d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	193a      	adds	r2, r7, r4
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 fe89 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b00b      	add	sp, #44	; 0x2c
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40012400 	.word	0x40012400
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <HAL_TIM_Base_MspInit+0x44>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d113      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <HAL_TIM_Base_MspInit+0x48>)
 8000910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_TIM_Base_MspInit+0x48>)
 8000914:	2102      	movs	r1, #2
 8000916:	430a      	orrs	r2, r1
 8000918:	63da      	str	r2, [r3, #60]	; 0x3c
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_TIM_Base_MspInit+0x48>)
 800091c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800091e:	2202      	movs	r2, #2
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2010      	movs	r0, #16
 800092c:	f000 fe34 	bl	8001598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000930:	2010      	movs	r0, #16
 8000932:	f000 fe46 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b004      	add	sp, #16
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40000400 	.word	0x40000400
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f8aa 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <TIM3_IRQHandler+0x14>)
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fd5a 	bl	8002438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	2000008c 	.word	0x2000008c

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a0:	f7ff fff6 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ca:	f002 f8df 	bl	8002b8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009ce:	f7ff fc51 	bl	8000274 <main>

080009d2 <LoopForever>:

LoopForever:
  b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e0:	08002c44 	.word	0x08002c44
  ldr r2, =_sbss
 80009e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e8:	200000e4 	.word	0x200000e4

080009ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_Init+0x3c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_Init+0x3c>)
 8000a02:	2180      	movs	r1, #128	; 0x80
 8000a04:	0049      	lsls	r1, r1, #1
 8000a06:	430a      	orrs	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f000 f810 	bl	8000a30 <HAL_InitTick>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d003      	beq.n	8000a1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e001      	b.n	8000a20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff ff06 	bl	800082c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a38:	230f      	movs	r3, #15
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <HAL_InitTick+0x88>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d02b      	beq.n	8000aa0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_InitTick+0x8c>)
 8000a4a:	681c      	ldr	r4, [r3, #0]
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_InitTick+0x88>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	0019      	movs	r1, r3
 8000a52:	23fa      	movs	r3, #250	; 0xfa
 8000a54:	0098      	lsls	r0, r3, #2
 8000a56:	f7ff fb53 	bl	8000100 <__udivsi3>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0020      	movs	r0, r4
 8000a60:	f7ff fb4e 	bl	8000100 <__udivsi3>
 8000a64:	0003      	movs	r3, r0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fdbb 	bl	80015e2 <HAL_SYSTICK_Config>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d112      	bne.n	8000a96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d80a      	bhi.n	8000a8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 fd8a 	bl	8001598 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_InitTick+0x90>)
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	e00d      	b.n	8000aa8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e008      	b.n	8000aa8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a96:	230f      	movs	r3, #15
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e003      	b.n	8000aa8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b005      	add	sp, #20
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x1c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	001a      	movs	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	18d2      	adds	r2, r2, r3
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	200000e0 	.word	0x200000e0

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <HAL_GetTick+0x10>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	200000e0 	.word	0x200000e0

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff fff0 	bl	8000ae8 <HAL_GetTick>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	d005      	beq.n	8000b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_Delay+0x44>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	f7ff ffe0 	bl	8000ae8 <HAL_GetTick>
 8000b28:	0002      	movs	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8f7      	bhi.n	8000b24 <HAL_Delay+0x28>
  {
  }
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000008 	.word	0x20000008

08000b44 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000b54:	401a      	ands	r2, r3
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	fe3fffff 	.word	0xfe3fffff

08000b6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	23e0      	movs	r3, #224	; 0xe0
 8000b7a:	045b      	lsls	r3, r3, #17
 8000b7c:	4013      	ands	r3, r2
}
 8000b7e:	0018      	movs	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	2104      	movs	r1, #4
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	2107      	movs	r1, #7
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	000a      	movs	r2, r1
 8000ba2:	43d2      	mvns	r2, r2
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	2104      	movs	r1, #4
 8000baa:	400b      	ands	r3, r1
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4099      	lsls	r1, r3
 8000bb0:	000b      	movs	r3, r1
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b004      	add	sp, #16
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	000a      	movs	r2, r1
 8000bda:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2104      	movs	r1, #4
 8000be0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000be2:	40da      	lsrs	r2, r3
 8000be4:	0013      	movs	r3, r2
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}

08000bee <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	211f      	movs	r1, #31
 8000c02:	400a      	ands	r2, r1
 8000c04:	210f      	movs	r1, #15
 8000c06:	4091      	lsls	r1, r2
 8000c08:	000a      	movs	r2, r1
 8000c0a:	43d2      	mvns	r2, r2
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	0e9b      	lsrs	r3, r3, #26
 8000c12:	210f      	movs	r1, #15
 8000c14:	4019      	ands	r1, r3
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	201f      	movs	r0, #31
 8000c1a:	4003      	ands	r3, r0
 8000c1c:	4099      	lsls	r1, r3
 8000c1e:	000b      	movs	r3, r1
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	035b      	lsls	r3, r3, #13
 8000c40:	0b5b      	lsrs	r3, r3, #13
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	0352      	lsls	r2, r2, #13
 8000c62:	0b52      	lsrs	r2, r2, #13
 8000c64:	43d2      	mvns	r2, r2
 8000c66:	401a      	ands	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	0212      	lsls	r2, r2, #8
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	400b      	ands	r3, r1
 8000c94:	4904      	ldr	r1, [pc, #16]	; (8000ca8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000c96:	400b      	ands	r3, r1
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	07ffff00 	.word	0x07ffff00

08000cac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	0552      	lsls	r2, r2, #21
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	6fffffe8 	.word	0x6fffffe8

08000cd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	055b      	lsls	r3, r3, #21
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	055b      	lsls	r3, r3, #21
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d101      	bne.n	8000cf2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <LL_ADC_IsEnabled+0x18>
 8000d10:	2301      	movs	r3, #1
 8000d12:	e000      	b.n	8000d16 <LL_ADC_IsEnabled+0x1a>
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d101      	bne.n	8000d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d48:	231f      	movs	r3, #31
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e17f      	b.n	8001066 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10a      	bne.n	8000d84 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff fd7f 	bl	8000874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2254      	movs	r2, #84	; 0x54
 8000d80:	2100      	movs	r1, #0
 8000d82:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ffa3 	bl	8000cd4 <LL_ADC_IsInternalRegulatorEnabled>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d115      	bne.n	8000dbe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff ff88 	bl	8000cac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d9c:	4bb4      	ldr	r3, [pc, #720]	; (8001070 <HAL_ADC_Init+0x330>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	49b4      	ldr	r1, [pc, #720]	; (8001074 <HAL_ADC_Init+0x334>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff f9ac 	bl	8000100 <__udivsi3>
 8000da8:	0003      	movs	r3, r0
 8000daa:	3301      	adds	r3, #1
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000db0:	e002      	b.n	8000db8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f9      	bne.n	8000db2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff86 	bl	8000cd4 <LL_ADC_IsInternalRegulatorEnabled>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d10f      	bne.n	8000dec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ddc:	2201      	movs	r2, #1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000de4:	231f      	movs	r3, #31
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff ff94 	bl	8000d1e <LL_ADC_REG_IsConversionOngoing>
 8000df6:	0003      	movs	r3, r0
 8000df8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	2210      	movs	r2, #16
 8000e00:	4013      	ands	r3, r2
 8000e02:	d000      	beq.n	8000e06 <HAL_ADC_Init+0xc6>
 8000e04:	e122      	b.n	800104c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d000      	beq.n	8000e0e <HAL_ADC_Init+0xce>
 8000e0c:	e11e      	b.n	800104c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	4a99      	ldr	r2, [pc, #612]	; (8001078 <HAL_ADC_Init+0x338>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	2202      	movs	r2, #2
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff ff6a 	bl	8000cfc <LL_ADC_IsEnabled>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d000      	beq.n	8000e2e <HAL_ADC_Init+0xee>
 8000e2c:	e0ad      	b.n	8000f8a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7e1b      	ldrb	r3, [r3, #24]
 8000e36:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e38:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7e5b      	ldrb	r3, [r3, #25]
 8000e3e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e40:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7e9b      	ldrb	r3, [r3, #26]
 8000e46:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e48:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <HAL_ADC_Init+0x118>
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	e000      	b.n	8000e5a <HAL_ADC_Init+0x11a>
 8000e58:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e5a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e60:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da04      	bge.n	8000e74 <HAL_ADC_Init+0x134>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	085b      	lsrs	r3, r3, #1
 8000e72:	e001      	b.n	8000e78 <HAL_ADC_Init+0x138>
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000e78:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	212c      	movs	r1, #44	; 0x2c
 8000e7e:	5c5b      	ldrb	r3, [r3, r1]
 8000e80:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e82:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	5c9b      	ldrb	r3, [r3, r2]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d115      	bne.n	8000ec0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7e9b      	ldrb	r3, [r3, #26]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d105      	bne.n	8000ea8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	0252      	lsls	r2, r2, #9
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	e00b      	b.n	8000ec0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	2220      	movs	r2, #32
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb8:	2201      	movs	r2, #1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00a      	beq.n	8000ede <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ecc:	23e0      	movs	r3, #224	; 0xe0
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4a65      	ldr	r2, [pc, #404]	; (800107c <HAL_ADC_Init+0x33c>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	0019      	movs	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	0f9b      	lsrs	r3, r3, #30
 8000efa:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f00:	4313      	orrs	r3, r2
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	223c      	movs	r2, #60	; 0x3c
 8000f0c:	5c9b      	ldrb	r3, [r3, r2]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d111      	bne.n	8000f36 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	0f9b      	lsrs	r3, r3, #30
 8000f18:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f1e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f24:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f2a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	2201      	movs	r2, #1
 8000f32:	4313      	orrs	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	4a50      	ldr	r2, [pc, #320]	; (8001080 <HAL_ADC_Init+0x340>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	0019      	movs	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	23c0      	movs	r3, #192	; 0xc0
 8000f52:	061b      	lsls	r3, r3, #24
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d018      	beq.n	8000f8a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	05db      	lsls	r3, r3, #23
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d012      	beq.n	8000f8a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	061b      	lsls	r3, r3, #24
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d00c      	beq.n	8000f8a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000f70:	4b44      	ldr	r3, [pc, #272]	; (8001084 <HAL_ADC_Init+0x344>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_ADC_Init+0x348>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	0019      	movs	r1, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	23f0      	movs	r3, #240	; 0xf0
 8000f80:	039b      	lsls	r3, r3, #14
 8000f82:	401a      	ands	r2, r3
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <HAL_ADC_Init+0x344>)
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	001a      	movs	r2, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	f7ff fdf6 	bl	8000b86 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa2:	493a      	ldr	r1, [pc, #232]	; (800108c <HAL_ADC_Init+0x34c>)
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	f7ff fdee 	bl	8000b86 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	4249      	negs	r1, r1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8000fc4:	e018      	b.n	8000ff8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	039b      	lsls	r3, r3, #14
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d112      	bne.n	8000ff8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	221c      	movs	r2, #28
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	4252      	negs	r2, r2
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	0011      	movs	r1, r2
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	0018      	movs	r0, r3
 8001000:	f7ff fdde 	bl	8000bc0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001004:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800100a:	429a      	cmp	r2, r3
 800100c:	d10b      	bne.n	8001026 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	2203      	movs	r2, #3
 800101a:	4393      	bics	r3, r2
 800101c:	2201      	movs	r2, #1
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001024:	e01c      	b.n	8001060 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	2212      	movs	r2, #18
 800102c:	4393      	bics	r3, r2
 800102e:	2210      	movs	r2, #16
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103a:	2201      	movs	r2, #1
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001042:	231f      	movs	r3, #31
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800104a:	e009      	b.n	8001060 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	2210      	movs	r2, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001058:	231f      	movs	r3, #31
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001060:	231f      	movs	r3, #31
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b008      	add	sp, #32
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	20000000 	.word	0x20000000
 8001074:	00030d40 	.word	0x00030d40
 8001078:	fffffefd 	.word	0xfffffefd
 800107c:	fffe0201 	.word	0xfffe0201
 8001080:	1ffffc02 	.word	0x1ffffc02
 8001084:	40012708 	.word	0x40012708
 8001088:	ffc3ffff 	.word	0xffc3ffff
 800108c:	07ffff04 	.word	0x07ffff04

08001090 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109a:	2317      	movs	r3, #23
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2254      	movs	r2, #84	; 0x54
 80010aa:	5c9b      	ldrb	r3, [r3, r2]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x24>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e1c0      	b.n	8001436 <HAL_ADC_ConfigChannel+0x3a6>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2254      	movs	r2, #84	; 0x54
 80010b8:	2101      	movs	r1, #1
 80010ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff fe2c 	bl	8000d1e <LL_ADC_REG_IsConversionOngoing>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d000      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x3c>
 80010ca:	e1a3      	b.n	8001414 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d100      	bne.n	80010d6 <HAL_ADC_ConfigChannel+0x46>
 80010d4:	e143      	b.n	800135e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	061b      	lsls	r3, r3, #24
 80010de:	429a      	cmp	r2, r3
 80010e0:	d004      	beq.n	80010ec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010e6:	4ac1      	ldr	r2, [pc, #772]	; (80013ec <HAL_ADC_ConfigChannel+0x35c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d108      	bne.n	80010fe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0019      	movs	r1, r3
 80010f6:	0010      	movs	r0, r2
 80010f8:	f7ff fd99 	bl	8000c2e <LL_ADC_REG_SetSequencerChAdd>
 80010fc:	e0c9      	b.n	8001292 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	211f      	movs	r1, #31
 8001108:	400b      	ands	r3, r1
 800110a:	210f      	movs	r1, #15
 800110c:	4099      	lsls	r1, r3
 800110e:	000b      	movs	r3, r1
 8001110:	43db      	mvns	r3, r3
 8001112:	4013      	ands	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	035b      	lsls	r3, r3, #13
 800111c:	0b5b      	lsrs	r3, r3, #13
 800111e:	d105      	bne.n	800112c <HAL_ADC_ConfigChannel+0x9c>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0e9b      	lsrs	r3, r3, #26
 8001126:	221f      	movs	r2, #31
 8001128:	4013      	ands	r3, r2
 800112a:	e098      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2201      	movs	r2, #1
 8001132:	4013      	ands	r3, r2
 8001134:	d000      	beq.n	8001138 <HAL_ADC_ConfigChannel+0xa8>
 8001136:	e091      	b.n	800125c <HAL_ADC_ConfigChannel+0x1cc>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2202      	movs	r2, #2
 800113e:	4013      	ands	r3, r2
 8001140:	d000      	beq.n	8001144 <HAL_ADC_ConfigChannel+0xb4>
 8001142:	e089      	b.n	8001258 <HAL_ADC_ConfigChannel+0x1c8>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2204      	movs	r2, #4
 800114a:	4013      	ands	r3, r2
 800114c:	d000      	beq.n	8001150 <HAL_ADC_ConfigChannel+0xc0>
 800114e:	e081      	b.n	8001254 <HAL_ADC_ConfigChannel+0x1c4>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2208      	movs	r2, #8
 8001156:	4013      	ands	r3, r2
 8001158:	d000      	beq.n	800115c <HAL_ADC_ConfigChannel+0xcc>
 800115a:	e079      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1c0>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2210      	movs	r2, #16
 8001162:	4013      	ands	r3, r2
 8001164:	d000      	beq.n	8001168 <HAL_ADC_ConfigChannel+0xd8>
 8001166:	e071      	b.n	800124c <HAL_ADC_ConfigChannel+0x1bc>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2220      	movs	r2, #32
 800116e:	4013      	ands	r3, r2
 8001170:	d000      	beq.n	8001174 <HAL_ADC_ConfigChannel+0xe4>
 8001172:	e069      	b.n	8001248 <HAL_ADC_ConfigChannel+0x1b8>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2240      	movs	r2, #64	; 0x40
 800117a:	4013      	ands	r3, r2
 800117c:	d000      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xf0>
 800117e:	e061      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1b4>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	4013      	ands	r3, r2
 8001188:	d000      	beq.n	800118c <HAL_ADC_ConfigChannel+0xfc>
 800118a:	e059      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1b0>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4013      	ands	r3, r2
 8001196:	d151      	bne.n	800123c <HAL_ADC_ConfigChannel+0x1ac>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d149      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1a8>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4013      	ands	r3, r2
 80011ae:	d141      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x1a4>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	4013      	ands	r3, r2
 80011ba:	d139      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1a0>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	015b      	lsls	r3, r3, #5
 80011c4:	4013      	ands	r3, r2
 80011c6:	d131      	bne.n	800122c <HAL_ADC_ConfigChannel+0x19c>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	019b      	lsls	r3, r3, #6
 80011d0:	4013      	ands	r3, r2
 80011d2:	d129      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x198>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	01db      	lsls	r3, r3, #7
 80011dc:	4013      	ands	r3, r2
 80011de:	d121      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x194>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	4013      	ands	r3, r2
 80011ea:	d119      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x190>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	4013      	ands	r3, r2
 80011f6:	d111      	bne.n	800121c <HAL_ADC_ConfigChannel+0x18c>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	029b      	lsls	r3, r3, #10
 8001200:	4013      	ands	r3, r2
 8001202:	d109      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x188>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	02db      	lsls	r3, r3, #11
 800120c:	4013      	ands	r3, r2
 800120e:	d001      	beq.n	8001214 <HAL_ADC_ConfigChannel+0x184>
 8001210:	2312      	movs	r3, #18
 8001212:	e024      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001214:	2300      	movs	r3, #0
 8001216:	e022      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001218:	2311      	movs	r3, #17
 800121a:	e020      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 800121c:	2310      	movs	r3, #16
 800121e:	e01e      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001220:	230f      	movs	r3, #15
 8001222:	e01c      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001224:	230e      	movs	r3, #14
 8001226:	e01a      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001228:	230d      	movs	r3, #13
 800122a:	e018      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 800122c:	230c      	movs	r3, #12
 800122e:	e016      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001230:	230b      	movs	r3, #11
 8001232:	e014      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001234:	230a      	movs	r3, #10
 8001236:	e012      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001238:	2309      	movs	r3, #9
 800123a:	e010      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 800123c:	2308      	movs	r3, #8
 800123e:	e00e      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001240:	2307      	movs	r3, #7
 8001242:	e00c      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001244:	2306      	movs	r3, #6
 8001246:	e00a      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001248:	2305      	movs	r3, #5
 800124a:	e008      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 800124c:	2304      	movs	r3, #4
 800124e:	e006      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001250:	2303      	movs	r3, #3
 8001252:	e004      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_ADC_ConfigChannel+0x1ce>
 800125c:	2300      	movs	r3, #0
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	6852      	ldr	r2, [r2, #4]
 8001262:	201f      	movs	r0, #31
 8001264:	4002      	ands	r2, r0
 8001266:	4093      	lsls	r3, r2
 8001268:	000a      	movs	r2, r1
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	429a      	cmp	r2, r3
 800127e:	d808      	bhi.n	8001292 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	f7ff fcae 	bl	8000bee <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	001a      	movs	r2, r3
 80012a0:	f7ff fce8 	bl	8000c74 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db00      	blt.n	80012ae <HAL_ADC_ConfigChannel+0x21e>
 80012ac:	e0bc      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012ae:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <HAL_ADC_ConfigChannel+0x360>)
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff fc5b 	bl	8000b6c <LL_ADC_GetCommonPathInternalCh>
 80012b6:	0003      	movs	r3, r0
 80012b8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <HAL_ADC_ConfigChannel+0x364>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d122      	bne.n	800130a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	041b      	lsls	r3, r3, #16
 80012ca:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012cc:	d11d      	bne.n	800130a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	0412      	lsls	r2, r2, #16
 80012d4:	4313      	orrs	r3, r2
 80012d6:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <HAL_ADC_ConfigChannel+0x360>)
 80012d8:	0019      	movs	r1, r3
 80012da:	0010      	movs	r0, r2
 80012dc:	f7ff fc32 	bl	8000b44 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012e0:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <HAL_ADC_ConfigChannel+0x368>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4945      	ldr	r1, [pc, #276]	; (80013fc <HAL_ADC_ConfigChannel+0x36c>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7fe ff0a 	bl	8000100 <__udivsi3>
 80012ec:	0003      	movs	r3, r0
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	0013      	movs	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	189b      	adds	r3, r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012fa:	e002      	b.n	8001302 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3b01      	subs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f9      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001308:	e08e      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a3c      	ldr	r2, [pc, #240]	; (8001400 <HAL_ADC_ConfigChannel+0x370>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d10e      	bne.n	8001332 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	045b      	lsls	r3, r3, #17
 800131a:	4013      	ands	r3, r2
 800131c:	d109      	bne.n	8001332 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	0452      	lsls	r2, r2, #17
 8001324:	4313      	orrs	r3, r2
 8001326:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <HAL_ADC_ConfigChannel+0x360>)
 8001328:	0019      	movs	r1, r3
 800132a:	0010      	movs	r0, r2
 800132c:	f7ff fc0a 	bl	8000b44 <LL_ADC_SetCommonPathInternalCh>
 8001330:	e07a      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a33      	ldr	r2, [pc, #204]	; (8001404 <HAL_ADC_ConfigChannel+0x374>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d000      	beq.n	800133e <HAL_ADC_ConfigChannel+0x2ae>
 800133c:	e074      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	03db      	lsls	r3, r3, #15
 8001344:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001346:	d000      	beq.n	800134a <HAL_ADC_ConfigChannel+0x2ba>
 8001348:	e06e      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	03d2      	lsls	r2, r2, #15
 8001350:	4313      	orrs	r3, r2
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <HAL_ADC_ConfigChannel+0x360>)
 8001354:	0019      	movs	r1, r3
 8001356:	0010      	movs	r0, r2
 8001358:	f7ff fbf4 	bl	8000b44 <LL_ADC_SetCommonPathInternalCh>
 800135c:	e064      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	061b      	lsls	r3, r3, #24
 8001366:	429a      	cmp	r2, r3
 8001368:	d004      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <HAL_ADC_ConfigChannel+0x35c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d107      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	0019      	movs	r1, r3
 800137e:	0010      	movs	r0, r2
 8001380:	f7ff fc66 	bl	8000c50 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	da4d      	bge.n	8001428 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_ADC_ConfigChannel+0x360>)
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff fbec 	bl	8000b6c <LL_ADC_GetCommonPathInternalCh>
 8001394:	0003      	movs	r3, r0
 8001396:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <HAL_ADC_ConfigChannel+0x364>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d108      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_ADC_ConfigChannel+0x378>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_ADC_ConfigChannel+0x360>)
 80013aa:	0019      	movs	r1, r3
 80013ac:	0010      	movs	r0, r2
 80013ae:	f7ff fbc9 	bl	8000b44 <LL_ADC_SetCommonPathInternalCh>
 80013b2:	e039      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_ADC_ConfigChannel+0x370>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d108      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_ADC_ConfigChannel+0x37c>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_ADC_ConfigChannel+0x360>)
 80013c6:	0019      	movs	r1, r3
 80013c8:	0010      	movs	r0, r2
 80013ca:	f7ff fbbb 	bl	8000b44 <LL_ADC_SetCommonPathInternalCh>
 80013ce:	e02b      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_ADC_ConfigChannel+0x374>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d126      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_ADC_ConfigChannel+0x380>)
 80013de:	4013      	ands	r3, r2
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <HAL_ADC_ConfigChannel+0x360>)
 80013e2:	0019      	movs	r1, r3
 80013e4:	0010      	movs	r0, r2
 80013e6:	f7ff fbad 	bl	8000b44 <LL_ADC_SetCommonPathInternalCh>
 80013ea:	e01d      	b.n	8001428 <HAL_ADC_ConfigChannel+0x398>
 80013ec:	80000004 	.word	0x80000004
 80013f0:	40012708 	.word	0x40012708
 80013f4:	b0001000 	.word	0xb0001000
 80013f8:	20000000 	.word	0x20000000
 80013fc:	00030d40 	.word	0x00030d40
 8001400:	b8004000 	.word	0xb8004000
 8001404:	b4002000 	.word	0xb4002000
 8001408:	ff7fffff 	.word	0xff7fffff
 800140c:	feffffff 	.word	0xfeffffff
 8001410:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	2220      	movs	r2, #32
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001420:	2317      	movs	r3, #23
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2254      	movs	r2, #84	; 0x54
 800142c:	2100      	movs	r1, #0
 800142e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001430:	2317      	movs	r3, #23
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b006      	add	sp, #24
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	0002      	movs	r2, r0
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b7f      	cmp	r3, #127	; 0x7f
 8001452:	d809      	bhi.n	8001468 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	001a      	movs	r2, r3
 800145a:	231f      	movs	r3, #31
 800145c:	401a      	ands	r2, r3
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_EnableIRQ+0x30>)
 8001460:	2101      	movs	r1, #1
 8001462:	4091      	lsls	r1, r2
 8001464:	000a      	movs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	0002      	movs	r2, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b7f      	cmp	r3, #127	; 0x7f
 8001488:	d828      	bhi.n	80014dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <__NVIC_SetPriority+0xd4>)
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25b      	sxtb	r3, r3
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	33c0      	adds	r3, #192	; 0xc0
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	589b      	ldr	r3, [r3, r2]
 800149a:	1dfa      	adds	r2, r7, #7
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	0011      	movs	r1, r2
 80014a0:	2203      	movs	r2, #3
 80014a2:	400a      	ands	r2, r1
 80014a4:	00d2      	lsls	r2, r2, #3
 80014a6:	21ff      	movs	r1, #255	; 0xff
 80014a8:	4091      	lsls	r1, r2
 80014aa:	000a      	movs	r2, r1
 80014ac:	43d2      	mvns	r2, r2
 80014ae:	401a      	ands	r2, r3
 80014b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	22ff      	movs	r2, #255	; 0xff
 80014b8:	401a      	ands	r2, r3
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	0018      	movs	r0, r3
 80014c0:	2303      	movs	r3, #3
 80014c2:	4003      	ands	r3, r0
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <__NVIC_SetPriority+0xd4>)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	430a      	orrs	r2, r1
 80014d4:	33c0      	adds	r3, #192	; 0xc0
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014da:	e031      	b.n	8001540 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <__NVIC_SetPriority+0xd8>)
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0019      	movs	r1, r3
 80014e4:	230f      	movs	r3, #15
 80014e6:	400b      	ands	r3, r1
 80014e8:	3b08      	subs	r3, #8
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3306      	adds	r3, #6
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	3304      	adds	r3, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1dfa      	adds	r2, r7, #7
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	0011      	movs	r1, r2
 80014fc:	2203      	movs	r2, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	00d2      	lsls	r2, r2, #3
 8001502:	21ff      	movs	r1, #255	; 0xff
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	43d2      	mvns	r2, r2
 800150a:	401a      	ands	r2, r3
 800150c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	22ff      	movs	r2, #255	; 0xff
 8001514:	401a      	ands	r2, r3
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	0018      	movs	r0, r3
 800151c:	2303      	movs	r3, #3
 800151e:	4003      	ands	r3, r0
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <__NVIC_SetPriority+0xd8>)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	001c      	movs	r4, r3
 800152c:	230f      	movs	r3, #15
 800152e:	4023      	ands	r3, r4
 8001530:	3b08      	subs	r3, #8
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	430a      	orrs	r2, r1
 8001536:	3306      	adds	r3, #6
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	18c3      	adds	r3, r0, r3
 800153c:	3304      	adds	r3, #4
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b003      	add	sp, #12
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	045b      	lsls	r3, r3, #17
 8001560:	429a      	cmp	r2, r3
 8001562:	d301      	bcc.n	8001568 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001564:	2301      	movs	r3, #1
 8001566:	e010      	b.n	800158a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SysTick_Config+0x44>)
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	3a01      	subs	r2, #1
 800156e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001570:	2301      	movs	r3, #1
 8001572:	425b      	negs	r3, r3
 8001574:	2103      	movs	r1, #3
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff7c 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x44>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x44>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	210f      	movs	r1, #15
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	1c02      	adds	r2, r0, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	0002      	movs	r2, r0
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ff33 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff ffaf 	bl	8001550 <SysTick_Config>
 80015f2:	0003      	movs	r3, r0
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e147      	b.n	800189c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4091      	lsls	r1, r2
 8001616:	000a      	movs	r2, r1
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d100      	bne.n	8001624 <HAL_GPIO_Init+0x28>
 8001622:	e138      	b.n	8001896 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2203      	movs	r2, #3
 800162a:	4013      	ands	r3, r2
 800162c:	2b01      	cmp	r3, #1
 800162e:	d005      	beq.n	800163c <HAL_GPIO_Init+0x40>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2203      	movs	r2, #3
 8001636:	4013      	ands	r3, r2
 8001638:	2b02      	cmp	r3, #2
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	409a      	lsls	r2, r3
 800164a:	0013      	movs	r3, r2
 800164c:	43da      	mvns	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	409a      	lsls	r2, r3
 800165e:	0013      	movs	r3, r2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	43da      	mvns	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	2201      	movs	r2, #1
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2203      	movs	r2, #3
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d017      	beq.n	80016da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	43da      	mvns	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2203      	movs	r2, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d123      	bne.n	800172e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	58d3      	ldr	r3, [r2, r3]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2207      	movs	r2, #7
 80016f8:	4013      	ands	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	43da      	mvns	r2, r3
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2107      	movs	r1, #7
 8001712:	400b      	ands	r3, r1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	409a      	lsls	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	6939      	ldr	r1, [r7, #16]
 800172c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	43da      	mvns	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2203      	movs	r2, #3
 800174c:	401a      	ands	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	4013      	ands	r3, r2
 800176c:	d100      	bne.n	8001770 <HAL_GPIO_Init+0x174>
 800176e:	e092      	b.n	8001896 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3318      	adds	r3, #24
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	589b      	ldr	r3, [r3, r2]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2203      	movs	r2, #3
 8001782:	4013      	ands	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	220f      	movs	r2, #15
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	43da      	mvns	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	23a0      	movs	r3, #160	; 0xa0
 8001798:	05db      	lsls	r3, r3, #23
 800179a:	429a      	cmp	r2, r3
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0x1ca>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a45      	ldr	r2, [pc, #276]	; (80018b8 <HAL_GPIO_Init+0x2bc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x1c6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a44      	ldr	r2, [pc, #272]	; (80018bc <HAL_GPIO_Init+0x2c0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x1c2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a43      	ldr	r2, [pc, #268]	; (80018c0 <HAL_GPIO_Init+0x2c4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x1be>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x1cc>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e004      	b.n	80017c8 <HAL_GPIO_Init+0x1cc>
 80017be:	2302      	movs	r3, #2
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_Init+0x1cc>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x1cc>
 80017c6:	2300      	movs	r3, #0
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	2103      	movs	r1, #3
 80017cc:	400a      	ands	r2, r1
 80017ce:	00d2      	lsls	r2, r2, #3
 80017d0:	4093      	lsls	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017d8:	4936      	ldr	r1, [pc, #216]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3318      	adds	r3, #24
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e6:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43da      	mvns	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	035b      	lsls	r3, r3, #13
 80017fe:	4013      	ands	r3, r2
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43da      	mvns	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	039b      	lsls	r3, r3, #14
 8001828:	4013      	ands	r3, r2
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 800183c:	2384      	movs	r3, #132	; 0x84
 800183e:	58d3      	ldr	r3, [r2, r3]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43da      	mvns	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	029b      	lsls	r3, r3, #10
 8001854:	4013      	ands	r3, r2
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001860:	4914      	ldr	r1, [pc, #80]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 8001862:	2284      	movs	r2, #132	; 0x84
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	58d3      	ldr	r3, [r2, r3]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	025b      	lsls	r3, r3, #9
 8001882:	4013      	ands	r3, r2
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188e:	4909      	ldr	r1, [pc, #36]	; (80018b4 <HAL_GPIO_Init+0x2b8>)
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	40da      	lsrs	r2, r3
 80018a4:	1e13      	subs	r3, r2, #0
 80018a6:	d000      	beq.n	80018aa <HAL_GPIO_Init+0x2ae>
 80018a8:	e6b0      	b.n	800160c <HAL_GPIO_Init+0x10>
  }
}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b006      	add	sp, #24
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021800 	.word	0x40021800
 80018b8:	50000400 	.word	0x50000400
 80018bc:	50000800 	.word	0x50000800
 80018c0:	50000c00 	.word	0x50000c00

080018c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	000a      	movs	r2, r1
 80018ce:	1cbb      	adds	r3, r7, #2
 80018d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	1cba      	adds	r2, r7, #2
 80018d8:	8812      	ldrh	r2, [r2, #0]
 80018da:	4013      	ands	r3, r2
 80018dc:	d004      	beq.n	80018e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80018de:	230f      	movs	r3, #15
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	e003      	b.n	80018f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018e8:	230f      	movs	r3, #15
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80018f0:	230f      	movs	r3, #15
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	781b      	ldrb	r3, [r3, #0]
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b004      	add	sp, #16
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	0008      	movs	r0, r1
 8001908:	0011      	movs	r1, r2
 800190a:	1cbb      	adds	r3, r7, #2
 800190c:	1c02      	adds	r2, r0, #0
 800190e:	801a      	strh	r2, [r3, #0]
 8001910:	1c7b      	adds	r3, r7, #1
 8001912:	1c0a      	adds	r2, r1, #0
 8001914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001916:	1c7b      	adds	r3, r7, #1
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191e:	1cbb      	adds	r3, r7, #2
 8001920:	881a      	ldrh	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001926:	e003      	b.n	8001930 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001928:	1cbb      	adds	r3, r7, #2
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001946:	4013      	ands	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d11f      	bne.n	800199c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	0013      	movs	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	189b      	adds	r3, r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4912      	ldr	r1, [pc, #72]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800196a:	0018      	movs	r0, r3
 800196c:	f7fe fbc8 	bl	8000100 <__udivsi3>
 8001970:	0003      	movs	r3, r0
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001976:	e008      	b.n	800198a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3b01      	subs	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e001      	b.n	800198a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e009      	b.n	800199e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	401a      	ands	r2, r3
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	429a      	cmp	r2, r3
 800199a:	d0ed      	beq.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b004      	add	sp, #16
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40007000 	.word	0x40007000
 80019ac:	fffff9ff 	.word	0xfffff9ff
 80019b0:	20000000 	.word	0x20000000
 80019b4:	000f4240 	.word	0x000f4240

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e2f3      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_OscConfig+0x1e>
 80019d4:	e07c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d6:	4bc3      	ldr	r3, [pc, #780]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2238      	movs	r2, #56	; 0x38
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e0:	4bc0      	ldr	r3, [pc, #768]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2203      	movs	r2, #3
 80019e6:	4013      	ands	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3e>
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d002      	beq.n	80019fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d10b      	bne.n	8001a14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	4bb9      	ldr	r3, [pc, #740]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	d062      	beq.n	8001ace <HAL_RCC_OscConfig+0x116>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d15e      	bne.n	8001ace <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e2ce      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	025b      	lsls	r3, r3, #9
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x78>
 8001a20:	4bb0      	ldr	r3, [pc, #704]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4baf      	ldr	r3, [pc, #700]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0249      	lsls	r1, r1, #9
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e020      	b.n	8001a72 <HAL_RCC_OscConfig+0xba>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	23a0      	movs	r3, #160	; 0xa0
 8001a36:	02db      	lsls	r3, r3, #11
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d10e      	bne.n	8001a5a <HAL_RCC_OscConfig+0xa2>
 8001a3c:	4ba9      	ldr	r3, [pc, #676]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4ba8      	ldr	r3, [pc, #672]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	02c9      	lsls	r1, r1, #11
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	4ba6      	ldr	r3, [pc, #664]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4ba5      	ldr	r3, [pc, #660]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0249      	lsls	r1, r1, #9
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0xba>
 8001a5a:	4ba2      	ldr	r3, [pc, #648]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4ba1      	ldr	r3, [pc, #644]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	49a1      	ldr	r1, [pc, #644]	; (8001ce8 <HAL_RCC_OscConfig+0x330>)
 8001a62:	400a      	ands	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b9f      	ldr	r3, [pc, #636]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b9e      	ldr	r3, [pc, #632]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	499f      	ldr	r1, [pc, #636]	; (8001cec <HAL_RCC_OscConfig+0x334>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d014      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f835 	bl	8000ae8 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff f830 	bl	8000ae8 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e28d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a96:	4b93      	ldr	r3, [pc, #588]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	029b      	lsls	r3, r3, #10
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xcc>
 8001aa2:	e015      	b.n	8001ad0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f820 	bl	8000ae8 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aae:	f7ff f81b 	bl	8000ae8 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b64      	cmp	r3, #100	; 0x64
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e278      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac0:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0xf6>
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d100      	bne.n	8001adc <HAL_RCC_OscConfig+0x124>
 8001ada:	e099      	b.n	8001c10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001adc:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2238      	movs	r2, #56	; 0x38
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2203      	movs	r2, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d102      	bne.n	8001afc <HAL_RCC_OscConfig+0x144>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d002      	beq.n	8001b02 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d135      	bne.n	8001b6e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b02:	4b78      	ldr	r3, [pc, #480]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x162>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e24b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b72      	ldr	r3, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a74      	ldr	r2, [pc, #464]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b36:	4b6b      	ldr	r3, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	; (8001cf4 <HAL_RCC_OscConfig+0x33c>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b4a:	4b66      	ldr	r3, [pc, #408]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0adb      	lsrs	r3, r3, #11
 8001b50:	2207      	movs	r2, #7
 8001b52:	4013      	ands	r3, r2
 8001b54:	4a68      	ldr	r2, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x340>)
 8001b56:	40da      	lsrs	r2, r3
 8001b58:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x344>)
 8001b5a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b5c:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x348>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7fe ff65 	bl	8000a30 <HAL_InitTick>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d051      	beq.n	8001c0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e221      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d030      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b76:	4b5b      	ldr	r3, [pc, #364]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a5e      	ldr	r2, [pc, #376]	; (8001cf4 <HAL_RCC_OscConfig+0x33c>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b8a:	4b56      	ldr	r3, [pc, #344]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	0049      	lsls	r1, r1, #1
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7fe ffa6 	bl	8000ae8 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7fe ffa1 	bl	8000ae8 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1fe      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b48      	ldr	r3, [pc, #288]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a4a      	ldr	r2, [pc, #296]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	021a      	lsls	r2, r3, #8
 8001bd0:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	e01b      	b.n	8001c10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001bd8:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	4949      	ldr	r1, [pc, #292]	; (8001d04 <HAL_RCC_OscConfig+0x34c>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7fe ff80 	bl	8000ae8 <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bee:	f7fe ff7b 	bl	8000ae8 <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1d8      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c00:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x236>
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2208      	movs	r2, #8
 8001c16:	4013      	ands	r3, r2
 8001c18:	d047      	beq.n	8001caa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2238      	movs	r2, #56	; 0x38
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b18      	cmp	r3, #24
 8001c24:	d10a      	bne.n	8001c3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c26:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d03c      	beq.n	8001caa <HAL_RCC_OscConfig+0x2f2>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d138      	bne.n	8001caa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e1ba      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d019      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe ff4a 	bl	8000ae8 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5a:	f7fe ff45 	bl	8000ae8 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1a2      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	2202      	movs	r2, #2
 8001c72:	4013      	ands	r3, r2
 8001c74:	d0f1      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2a2>
 8001c76:	e018      	b.n	8001caa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	2101      	movs	r1, #1
 8001c80:	438a      	bics	r2, r1
 8001c82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7fe ff30 	bl	8000ae8 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8e:	f7fe ff2b 	bl	8000ae8 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e188      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d1f1      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d100      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2fe>
 8001cb4:	e0c6      	b.n	8001e44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	231f      	movs	r3, #31
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2238      	movs	r2, #56	; 0x38
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d11e      	bne.n	8001d08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_OscConfig+0x32c>)
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d100      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x31e>
 8001cd4:	e0b6      	b.n	8001e44 <HAL_RCC_OscConfig+0x48c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d000      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x328>
 8001cde:	e0b1      	b.n	8001e44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e166      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	fffeffff 	.word	0xfffeffff
 8001cec:	fffbffff 	.word	0xfffbffff
 8001cf0:	ffff80ff 	.word	0xffff80ff
 8001cf4:	ffffc7ff 	.word	0xffffc7ff
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004
 8001d04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d08:	4bac      	ldr	r3, [pc, #688]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	055b      	lsls	r3, r3, #21
 8001d10:	4013      	ands	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x360>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x362>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d011      	beq.n	8001d42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4ba7      	ldr	r3, [pc, #668]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d22:	4ba6      	ldr	r3, [pc, #664]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	0549      	lsls	r1, r1, #21
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d2c:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	055b      	lsls	r3, r3, #21
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d3a:	231f      	movs	r3, #31
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d42:	4b9f      	ldr	r3, [pc, #636]	; (8001fc0 <HAL_RCC_OscConfig+0x608>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d11a      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4e:	4b9c      	ldr	r3, [pc, #624]	; (8001fc0 <HAL_RCC_OscConfig+0x608>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b9b      	ldr	r3, [pc, #620]	; (8001fc0 <HAL_RCC_OscConfig+0x608>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	0049      	lsls	r1, r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fec4 	bl	8000ae8 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d66:	f7fe febf 	bl	8000ae8 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e11c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d78:	4b91      	ldr	r3, [pc, #580]	; (8001fc0 <HAL_RCC_OscConfig+0x608>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3e2>
 8001d8c:	4b8b      	ldr	r3, [pc, #556]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001d8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d90:	4b8a      	ldr	r3, [pc, #552]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d98:	e01c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x41c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x404>
 8001da2:	4b86      	ldr	r3, [pc, #536]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001da4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da6:	4b85      	ldr	r3, [pc, #532]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001da8:	2104      	movs	r1, #4
 8001daa:	430a      	orrs	r2, r1
 8001dac:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dae:	4b83      	ldr	r3, [pc, #524]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db2:	4b82      	ldr	r3, [pc, #520]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001db4:	2101      	movs	r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x41c>
 8001dbc:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001dbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc0:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dc8:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001dca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dcc:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001dce:	2104      	movs	r1, #4
 8001dd0:	438a      	bics	r2, r1
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d014      	beq.n	8001e06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7fe fe84 	bl	8000ae8 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7fe fe7f 	bl	8000ae8 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a74      	ldr	r2, [pc, #464]	; (8001fc4 <HAL_RCC_OscConfig+0x60c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0db      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfa:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x42e>
 8001e04:	e013      	b.n	8001e2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7fe fe6f 	bl	8000ae8 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e0e:	e009      	b.n	8001e24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e10:	f7fe fe6a 	bl	8000ae8 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x60c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0c6      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e24:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e2e:	231f      	movs	r3, #31
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e38:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e3c:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001e3e:	4962      	ldr	r1, [pc, #392]	; (8001fc8 <HAL_RCC_OscConfig+0x610>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d100      	bne.n	8001e4e <HAL_RCC_OscConfig+0x496>
 8001e4c:	e0b0      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4e:	4b5b      	ldr	r3, [pc, #364]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2238      	movs	r2, #56	; 0x38
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d100      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4a4>
 8001e5a:	e078      	b.n	8001f4e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d153      	bne.n	8001f0c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b55      	ldr	r3, [pc, #340]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001e6a:	4958      	ldr	r1, [pc, #352]	; (8001fcc <HAL_RCC_OscConfig+0x614>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe fe3a 	bl	8000ae8 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7fe fe35 	bl	8000ae8 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e092      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	049b      	lsls	r3, r3, #18
 8001e94:	4013      	ands	r3, r2
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_RCC_OscConfig+0x618>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0449      	lsls	r1, r1, #17
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	0549      	lsls	r1, r1, #21
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fe01 	bl	8000ae8 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe fdfc 	bl	8000ae8 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e059      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	049b      	lsls	r3, r3, #18
 8001f06:	4013      	ands	r3, r2
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x534>
 8001f0a:	e051      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001f12:	492e      	ldr	r1, [pc, #184]	; (8001fcc <HAL_RCC_OscConfig+0x614>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe fde6 	bl	8000ae8 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7fe fde1 	bl	8000ae8 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e03e      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	049b      	lsls	r3, r3, #18
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001f46:	4923      	ldr	r1, [pc, #140]	; (8001fd4 <HAL_RCC_OscConfig+0x61c>)
 8001f48:	400a      	ands	r2, r1
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	e030      	b.n	8001fb0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e02b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x604>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2203      	movs	r2, #3
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d11e      	bne.n	8001fac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2270      	movs	r2, #112	; 0x70
 8001f72:	401a      	ands	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d117      	bne.n	8001fac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	23fe      	movs	r3, #254	; 0xfe
 8001f80:	01db      	lsls	r3, r3, #7
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d10e      	bne.n	8001fac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	23f8      	movs	r3, #248	; 0xf8
 8001f92:	039b      	lsls	r3, r3, #14
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	0f5b      	lsrs	r3, r3, #29
 8001fa2:	075a      	lsls	r2, r3, #29
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b008      	add	sp, #32
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	00001388 	.word	0x00001388
 8001fc8:	efffffff 	.word	0xefffffff
 8001fcc:	feffffff 	.word	0xfeffffff
 8001fd0:	1fc1808c 	.word	0x1fc1808c
 8001fd4:	effefffc 	.word	0xeffefffc

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0e9      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d91e      	bls.n	8002038 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b73      	ldr	r3, [pc, #460]	; (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2207      	movs	r2, #7
 8002000:	4393      	bics	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	4b70      	ldr	r3, [pc, #448]	; (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800200c:	f7fe fd6c 	bl	8000ae8 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002014:	e009      	b.n	800202a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f7fe fd67 	bl	8000ae8 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a6a      	ldr	r2, [pc, #424]	; (80021cc <HAL_RCC_ClockConfig+0x1f4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e0ca      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2207      	movs	r2, #7
 8002030:	4013      	ands	r3, r2
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2202      	movs	r2, #2
 800203e:	4013      	ands	r3, r2
 8002040:	d015      	beq.n	800206e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2204      	movs	r2, #4
 8002048:	4013      	ands	r3, r2
 800204a:	d006      	beq.n	800205a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800204c:	4b60      	ldr	r3, [pc, #384]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002052:	21e0      	movs	r1, #224	; 0xe0
 8002054:	01c9      	lsls	r1, r1, #7
 8002056:	430a      	orrs	r2, r1
 8002058:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	4a5d      	ldr	r2, [pc, #372]	; (80021d4 <HAL_RCC_ClockConfig+0x1fc>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 800206a:	430a      	orrs	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	4013      	ands	r3, r2
 8002076:	d057      	beq.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d107      	bne.n	8002090 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	029b      	lsls	r3, r3, #10
 8002088:	4013      	ands	r3, r2
 800208a:	d12b      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e097      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002098:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	049b      	lsls	r3, r3, #18
 80020a0:	4013      	ands	r3, r2
 80020a2:	d11f      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e08b      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b0:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4013      	ands	r3, r2
 80020ba:	d113      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e07f      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c8:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 80020ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020cc:	2202      	movs	r2, #2
 80020ce:	4013      	ands	r3, r2
 80020d0:	d108      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e074      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2202      	movs	r2, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e06d      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020e4:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2207      	movs	r2, #7
 80020ea:	4393      	bics	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f8:	f7fe fcf6 	bl	8000ae8 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002100:	e009      	b.n	8002116 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002102:	f7fe fcf1 	bl	8000ae8 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <HAL_RCC_ClockConfig+0x1f4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e054      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2238      	movs	r2, #56	; 0x38
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	429a      	cmp	r2, r3
 8002126:	d1ec      	bne.n	8002102 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2207      	movs	r2, #7
 800212e:	4013      	ands	r3, r2
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d21e      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2207      	movs	r2, #7
 800213c:	4393      	bics	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002148:	f7fe fcce 	bl	8000ae8 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002150:	e009      	b.n	8002166 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002152:	f7fe fcc9 	bl	8000ae8 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_RCC_ClockConfig+0x1f4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e02c      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2207      	movs	r2, #7
 800216c:	4013      	ands	r3, r2
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d1ee      	bne.n	8002152 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2204      	movs	r2, #4
 800217a:	4013      	ands	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <HAL_RCC_ClockConfig+0x200>)
 8002184:	4013      	ands	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002192:	f000 f829 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8002196:	0001      	movs	r1, r0
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_ClockConfig+0x1f8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	220f      	movs	r2, #15
 80021a0:	401a      	ands	r2, r3
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCC_ClockConfig+0x204>)
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	58d3      	ldr	r3, [r2, r3]
 80021a8:	221f      	movs	r2, #31
 80021aa:	4013      	ands	r3, r2
 80021ac:	000a      	movs	r2, r1
 80021ae:	40da      	lsrs	r2, r3
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_ClockConfig+0x208>)
 80021b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x20c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7fe fc39 	bl	8000a30 <HAL_InitTick>
 80021be:	0003      	movs	r3, r0
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b004      	add	sp, #16
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40022000 	.word	0x40022000
 80021cc:	00001388 	.word	0x00001388
 80021d0:	40021000 	.word	0x40021000
 80021d4:	fffff0ff 	.word	0xfffff0ff
 80021d8:	ffff8fff 	.word	0xffff8fff
 80021dc:	08002bfc 	.word	0x08002bfc
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ee:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2238      	movs	r2, #56	; 0x38
 80021f4:	4013      	ands	r3, r2
 80021f6:	d10f      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0adb      	lsrs	r3, r3, #11
 80021fe:	2207      	movs	r2, #7
 8002200:	4013      	ands	r3, r2
 8002202:	2201      	movs	r2, #1
 8002204:	409a      	lsls	r2, r3
 8002206:	0013      	movs	r3, r2
 8002208:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	4835      	ldr	r0, [pc, #212]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800220e:	f7fd ff77 	bl	8000100 <__udivsi3>
 8002212:	0003      	movs	r3, r0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	e05d      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002218:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2238      	movs	r2, #56	; 0x38
 800221e:	4013      	ands	r3, r2
 8002220:	2b08      	cmp	r3, #8
 8002222:	d102      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002224:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	e054      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2238      	movs	r2, #56	; 0x38
 8002230:	4013      	ands	r3, r2
 8002232:	2b10      	cmp	r3, #16
 8002234:	d138      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2203      	movs	r2, #3
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	2207      	movs	r2, #7
 8002248:	4013      	ands	r3, r2
 800224a:	3301      	adds	r3, #1
 800224c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d10d      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	4824      	ldr	r0, [pc, #144]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002258:	f7fd ff52 	bl	8000100 <__udivsi3>
 800225c:	0003      	movs	r3, r0
 800225e:	0019      	movs	r1, r3
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	227f      	movs	r2, #127	; 0x7f
 8002268:	4013      	ands	r3, r2
 800226a:	434b      	muls	r3, r1
 800226c:	617b      	str	r3, [r7, #20]
        break;
 800226e:	e00d      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	481c      	ldr	r0, [pc, #112]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002274:	f7fd ff44 	bl	8000100 <__udivsi3>
 8002278:	0003      	movs	r3, r0
 800227a:	0019      	movs	r1, r3
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	227f      	movs	r2, #127	; 0x7f
 8002284:	4013      	ands	r3, r2
 8002286:	434b      	muls	r3, r1
 8002288:	617b      	str	r3, [r7, #20]
        break;
 800228a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0f5b      	lsrs	r3, r3, #29
 8002292:	2207      	movs	r2, #7
 8002294:	4013      	ands	r3, r2
 8002296:	3301      	adds	r3, #1
 8002298:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	6978      	ldr	r0, [r7, #20]
 800229e:	f7fd ff2f 	bl	8000100 <__udivsi3>
 80022a2:	0003      	movs	r3, r0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e015      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2238      	movs	r2, #56	; 0x38
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d103      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2238      	movs	r2, #56	; 0x38
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b18      	cmp	r3, #24
 80022c6:	d103      	bne.n	80022d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80022c8:	23fa      	movs	r3, #250	; 0xfa
 80022ca:	01db      	lsls	r3, r3, #7
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	e001      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022d4:	693b      	ldr	r3, [r7, #16]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b006      	add	sp, #24
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	40021000 	.word	0x40021000
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	007a1200 	.word	0x007a1200

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e04a      	b.n	8002394 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	223d      	movs	r2, #61	; 0x3d
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	223c      	movs	r2, #60	; 0x3c
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f7fe faf1 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	223d      	movs	r2, #61	; 0x3d
 800231e:	2102      	movs	r1, #2
 8002320:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	0019      	movs	r1, r3
 800232c:	0010      	movs	r0, r2
 800232e:	f000 faab 	bl	8002888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2248      	movs	r2, #72	; 0x48
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	223e      	movs	r2, #62	; 0x3e
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	223f      	movs	r2, #63	; 0x3f
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2241      	movs	r2, #65	; 0x41
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2242      	movs	r2, #66	; 0x42
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2243      	movs	r2, #67	; 0x43
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2244      	movs	r2, #68	; 0x44
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2245      	movs	r2, #69	; 0x45
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2246      	movs	r2, #70	; 0x46
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2247      	movs	r2, #71	; 0x47
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	223d      	movs	r2, #61	; 0x3d
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	223d      	movs	r2, #61	; 0x3d
 80023a8:	5c9b      	ldrb	r3, [r3, r2]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e037      	b.n	8002424 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	223d      	movs	r2, #61	; 0x3d
 80023b8:	2102      	movs	r1, #2
 80023ba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2101      	movs	r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_TIM_Base_Start_IT+0x90>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_TIM_Base_Start_IT+0x44>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_TIM_Base_Start_IT+0x94>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d116      	bne.n	800240e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_TIM_Base_Start_IT+0x98>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d016      	beq.n	8002420 <HAL_TIM_Base_Start_IT+0x84>
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d011      	beq.n	8002420 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240c:	e008      	b.n	8002420 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e000      	b.n	8002422 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002420:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b004      	add	sp, #16
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40000400 	.word	0x40000400
 8002434:	00010007 	.word	0x00010007

08002438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2202      	movs	r2, #2
 8002448:	4013      	ands	r3, r2
 800244a:	2b02      	cmp	r3, #2
 800244c:	d124      	bne.n	8002498 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d11d      	bne.n	8002498 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2203      	movs	r2, #3
 8002462:	4252      	negs	r2, r2
 8002464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2203      	movs	r2, #3
 8002474:	4013      	ands	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 f9ec 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 8002480:	e007      	b.n	8002492 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0018      	movs	r0, r3
 8002486:	f000 f9df 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 f9eb 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2204      	movs	r2, #4
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d125      	bne.n	80024f2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2204      	movs	r2, #4
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d11e      	bne.n	80024f2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2205      	movs	r2, #5
 80024ba:	4252      	negs	r2, r2
 80024bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	23c0      	movs	r3, #192	; 0xc0
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 f9bf 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 80024da:	e007      	b.n	80024ec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f9b2 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 f9be 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2208      	movs	r2, #8
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d124      	bne.n	800254a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2208      	movs	r2, #8
 8002508:	4013      	ands	r3, r2
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11d      	bne.n	800254a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2209      	movs	r2, #9
 8002514:	4252      	negs	r2, r2
 8002516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2203      	movs	r2, #3
 8002526:	4013      	ands	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f000 f993 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 8002532:	e007      	b.n	8002544 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0018      	movs	r0, r3
 8002538:	f000 f986 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 f992 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2210      	movs	r2, #16
 8002552:	4013      	ands	r3, r2
 8002554:	2b10      	cmp	r3, #16
 8002556:	d125      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2210      	movs	r2, #16
 8002560:	4013      	ands	r3, r2
 8002562:	2b10      	cmp	r3, #16
 8002564:	d11e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2211      	movs	r2, #17
 800256c:	4252      	negs	r2, r2
 800256e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2208      	movs	r2, #8
 8002574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	23c0      	movs	r3, #192	; 0xc0
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f966 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 800258c:	e007      	b.n	800259e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f959 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 f965 	bl	8002868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2201      	movs	r2, #1
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d10f      	bne.n	80025d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d108      	bne.n	80025d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2202      	movs	r2, #2
 80025c6:	4252      	negs	r2, r2
 80025c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7fd fe99 	bl	8000304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	4013      	ands	r3, r2
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d10f      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d108      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2281      	movs	r2, #129	; 0x81
 80025f4:	4252      	negs	r2, r2
 80025f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fab6 	bl	8002b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	401a      	ands	r2, r3
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	429a      	cmp	r2, r3
 8002612:	d10e      	bne.n	8002632 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	4013      	ands	r3, r2
 800261e:	2b80      	cmp	r3, #128	; 0x80
 8002620:	d107      	bne.n	8002632 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <HAL_TIM_IRQHandler+0x260>)
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	0018      	movs	r0, r3
 800262e:	f000 faa5 	bl	8002b7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	4013      	ands	r3, r2
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d10f      	bne.n	8002660 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	4013      	ands	r3, r2
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d108      	bne.n	8002660 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2241      	movs	r2, #65	; 0x41
 8002654:	4252      	negs	r2, r2
 8002656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f90c 	bl	8002878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2220      	movs	r2, #32
 8002668:	4013      	ands	r3, r2
 800266a:	2b20      	cmp	r3, #32
 800266c:	d10f      	bne.n	800268e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	4013      	ands	r3, r2
 8002678:	2b20      	cmp	r3, #32
 800267a:	d108      	bne.n	800268e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2221      	movs	r2, #33	; 0x21
 8002682:	4252      	negs	r2, r2
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 fa67 	bl	8002b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b002      	add	sp, #8
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	fffffeff 	.word	0xfffffeff

0800269c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	230f      	movs	r3, #15
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223c      	movs	r2, #60	; 0x3c
 80026b2:	5c9b      	ldrb	r3, [r3, r2]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIM_ConfigClockSource+0x20>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e0bc      	b.n	8002836 <HAL_TIM_ConfigClockSource+0x19a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	223c      	movs	r2, #60	; 0x3c
 80026c0:	2101      	movs	r1, #1
 80026c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	223d      	movs	r2, #61	; 0x3d
 80026c8:	2102      	movs	r1, #2
 80026ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4a5a      	ldr	r2, [pc, #360]	; (8002840 <HAL_TIM_ConfigClockSource+0x1a4>)
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4a59      	ldr	r2, [pc, #356]	; (8002844 <HAL_TIM_ConfigClockSource+0x1a8>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	0192      	lsls	r2, r2, #6
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d040      	beq.n	800277a <HAL_TIM_ConfigClockSource+0xde>
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	0192      	lsls	r2, r2, #6
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d900      	bls.n	8002702 <HAL_TIM_ConfigClockSource+0x66>
 8002700:	e088      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	0152      	lsls	r2, r2, #5
 8002706:	4293      	cmp	r3, r2
 8002708:	d100      	bne.n	800270c <HAL_TIM_ConfigClockSource+0x70>
 800270a:	e088      	b.n	800281e <HAL_TIM_ConfigClockSource+0x182>
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	0152      	lsls	r2, r2, #5
 8002710:	4293      	cmp	r3, r2
 8002712:	d900      	bls.n	8002716 <HAL_TIM_ConfigClockSource+0x7a>
 8002714:	e07e      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
 8002716:	2b70      	cmp	r3, #112	; 0x70
 8002718:	d018      	beq.n	800274c <HAL_TIM_ConfigClockSource+0xb0>
 800271a:	d900      	bls.n	800271e <HAL_TIM_ConfigClockSource+0x82>
 800271c:	e07a      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
 800271e:	2b60      	cmp	r3, #96	; 0x60
 8002720:	d04f      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x126>
 8002722:	d900      	bls.n	8002726 <HAL_TIM_ConfigClockSource+0x8a>
 8002724:	e076      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
 8002726:	2b50      	cmp	r3, #80	; 0x50
 8002728:	d03b      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x106>
 800272a:	d900      	bls.n	800272e <HAL_TIM_ConfigClockSource+0x92>
 800272c:	e072      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d057      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x146>
 8002732:	d900      	bls.n	8002736 <HAL_TIM_ConfigClockSource+0x9a>
 8002734:	e06e      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
 8002736:	2b30      	cmp	r3, #48	; 0x30
 8002738:	d063      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x166>
 800273a:	d86b      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
 800273c:	2b20      	cmp	r3, #32
 800273e:	d060      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x166>
 8002740:	d868      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d05d      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x166>
 8002746:	2b10      	cmp	r3, #16
 8002748:	d05b      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x166>
 800274a:	e063      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f000 f97c 	bl	8002a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2277      	movs	r2, #119	; 0x77
 800276c:	4313      	orrs	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	609a      	str	r2, [r3, #8]
      break;
 8002778:	e052      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f000 f965 	bl	8002a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	01c9      	lsls	r1, r1, #7
 800279c:	430a      	orrs	r2, r1
 800279e:	609a      	str	r2, [r3, #8]
      break;
 80027a0:	e03e      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	001a      	movs	r2, r3
 80027b0:	f000 f8d6 	bl	8002960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2150      	movs	r1, #80	; 0x50
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 f930 	bl	8002a20 <TIM_ITRx_SetConfig>
      break;
 80027c0:	e02e      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	001a      	movs	r2, r3
 80027d0:	f000 f8f4 	bl	80029bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2160      	movs	r1, #96	; 0x60
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 f920 	bl	8002a20 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e01e      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	001a      	movs	r2, r3
 80027f0:	f000 f8b6 	bl	8002960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2140      	movs	r1, #64	; 0x40
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 f910 	bl	8002a20 <TIM_ITRx_SetConfig>
      break;
 8002800:	e00e      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0019      	movs	r1, r3
 800280c:	0010      	movs	r0, r2
 800280e:	f000 f907 	bl	8002a20 <TIM_ITRx_SetConfig>
      break;
 8002812:	e005      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002814:	230f      	movs	r3, #15
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
      break;
 800281c:	e000      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800281e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	223d      	movs	r2, #61	; 0x3d
 8002824:	2101      	movs	r1, #1
 8002826:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	223c      	movs	r2, #60	; 0x3c
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]

  return status;
 8002830:	230f      	movs	r3, #15
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	781b      	ldrb	r3, [r3, #0]
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b004      	add	sp, #16
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	ffceff88 	.word	0xffceff88
 8002844:	ffff00ff 	.word	0xffff00ff

08002848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <TIM_Base_SetConfig+0xc0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d003      	beq.n	80028a8 <TIM_Base_SetConfig+0x20>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a2a      	ldr	r2, [pc, #168]	; (800294c <TIM_Base_SetConfig+0xc4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d108      	bne.n	80028ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2270      	movs	r2, #112	; 0x70
 80028ac:	4393      	bics	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a22      	ldr	r2, [pc, #136]	; (8002948 <TIM_Base_SetConfig+0xc0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00f      	beq.n	80028e2 <TIM_Base_SetConfig+0x5a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a21      	ldr	r2, [pc, #132]	; (800294c <TIM_Base_SetConfig+0xc4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00b      	beq.n	80028e2 <TIM_Base_SetConfig+0x5a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <TIM_Base_SetConfig+0xc8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <TIM_Base_SetConfig+0x5a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <TIM_Base_SetConfig+0xcc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d003      	beq.n	80028e2 <TIM_Base_SetConfig+0x5a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <TIM_Base_SetConfig+0xd0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <TIM_Base_SetConfig+0xd4>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	4393      	bics	r3, r2
 80028fa:	001a      	movs	r2, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <TIM_Base_SetConfig+0xc0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <TIM_Base_SetConfig+0xaa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <TIM_Base_SetConfig+0xcc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d003      	beq.n	8002932 <TIM_Base_SetConfig+0xaa>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <TIM_Base_SetConfig+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d103      	bne.n	800293a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	615a      	str	r2, [r3, #20]
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40000400 	.word	0x40000400
 8002950:	40002000 	.word	0x40002000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800
 800295c:	fffffcff 	.word	0xfffffcff

08002960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	2201      	movs	r2, #1
 8002978:	4393      	bics	r3, r2
 800297a:	001a      	movs	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	22f0      	movs	r2, #240	; 0xf0
 800298a:	4393      	bics	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	220a      	movs	r2, #10
 800299c:	4393      	bics	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	621a      	str	r2, [r3, #32]
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b006      	add	sp, #24
 80029ba:	bd80      	pop	{r7, pc}

080029bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	2210      	movs	r2, #16
 80029ce:	4393      	bics	r3, r2
 80029d0:	001a      	movs	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <TIM_TI2_ConfigInputStage+0x60>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	031b      	lsls	r3, r3, #12
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	22a0      	movs	r2, #160	; 0xa0
 80029f8:	4393      	bics	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	621a      	str	r2, [r3, #32]
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b006      	add	sp, #24
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	ffff0fff 	.word	0xffff0fff

08002a20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <TIM_ITRx_SetConfig+0x34>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	2207      	movs	r2, #7
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b004      	add	sp, #16
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	ffcfff8f 	.word	0xffcfff8f

08002a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <TIM_ETR_SetConfig+0x3c>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	021a      	lsls	r2, r3, #8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b006      	add	sp, #24
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	ffff00ff 	.word	0xffff00ff

08002a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223c      	movs	r2, #60	; 0x3c
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e04a      	b.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223c      	movs	r2, #60	; 0x3c
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	223d      	movs	r2, #61	; 0x3d
 8002abc:	2102      	movs	r1, #2
 8002abe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2270      	movs	r2, #112	; 0x70
 8002af0:	4393      	bics	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10c      	bne.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	4393      	bics	r3, r2
 8002b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	223d      	movs	r2, #61	; 0x3d
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223c      	movs	r2, #60	; 0x3c
 8002b40:	2100      	movs	r1, #0
 8002b42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	ff0fffff 	.word	0xff0fffff
 8002b58:	40000400 	.word	0x40000400

08002b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	2600      	movs	r6, #0
 8002b90:	4d0c      	ldr	r5, [pc, #48]	; (8002bc4 <__libc_init_array+0x38>)
 8002b92:	4c0d      	ldr	r4, [pc, #52]	; (8002bc8 <__libc_init_array+0x3c>)
 8002b94:	1b64      	subs	r4, r4, r5
 8002b96:	10a4      	asrs	r4, r4, #2
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	2600      	movs	r6, #0
 8002b9e:	f000 f821 	bl	8002be4 <_init>
 8002ba2:	4d0a      	ldr	r5, [pc, #40]	; (8002bcc <__libc_init_array+0x40>)
 8002ba4:	4c0a      	ldr	r4, [pc, #40]	; (8002bd0 <__libc_init_array+0x44>)
 8002ba6:	1b64      	subs	r4, r4, r5
 8002ba8:	10a4      	asrs	r4, r4, #2
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	00b3      	lsls	r3, r6, #2
 8002bb2:	58eb      	ldr	r3, [r5, r3]
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	00b3      	lsls	r3, r6, #2
 8002bbc:	58eb      	ldr	r3, [r5, r3]
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	08002c3c 	.word	0x08002c3c
 8002bc8:	08002c3c 	.word	0x08002c3c
 8002bcc:	08002c3c 	.word	0x08002c3c
 8002bd0:	08002c40 	.word	0x08002c40

08002bd4 <memset>:
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	1882      	adds	r2, r0, r2
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	7019      	strb	r1, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <_init>:
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bea:	bc08      	pop	{r3}
 8002bec:	469e      	mov	lr, r3
 8002bee:	4770      	bx	lr

08002bf0 <_fini>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr
